# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UserSubscriptionBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, valid_from=None, valid_to=None, sku=None, child=None):  # noqa: E501
        """UserSubscriptionBody - a model defined in OpenAPI

        :param valid_from: The valid_from of this UserSubscriptionBody.  # noqa: E501
        :type valid_from: datetime
        :param valid_to: The valid_to of this UserSubscriptionBody.  # noqa: E501
        :type valid_to: datetime
        :param sku: The sku of this UserSubscriptionBody.  # noqa: E501
        :type sku: List[str]
        :param child: The child of this UserSubscriptionBody.  # noqa: E501
        :type child: str
        """
        self.openapi_types = {
            'valid_from': datetime,
            'valid_to': datetime,
            'sku': List[str],
            'child': str
        }

        self.attribute_map = {
            'valid_from': 'valid_from',
            'valid_to': 'valid_to',
            'sku': 'sku',
            'child': 'child'
        }

        self._valid_from = valid_from
        self._valid_to = valid_to
        self._sku = sku
        self._child = child

    @classmethod
    def from_dict(cls, dikt) -> 'UserSubscriptionBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user_subscription_body of this UserSubscriptionBody.  # noqa: E501
        :rtype: UserSubscriptionBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def valid_from(self):
        """Gets the valid_from of this UserSubscriptionBody.


        :return: The valid_from of this UserSubscriptionBody.
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this UserSubscriptionBody.


        :param valid_from: The valid_from of this UserSubscriptionBody.
        :type valid_from: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this UserSubscriptionBody.


        :return: The valid_to of this UserSubscriptionBody.
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this UserSubscriptionBody.


        :param valid_to: The valid_to of this UserSubscriptionBody.
        :type valid_to: datetime
        """

        self._valid_to = valid_to

    @property
    def sku(self):
        """Gets the sku of this UserSubscriptionBody.


        :return: The sku of this UserSubscriptionBody.
        :rtype: List[str]
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this UserSubscriptionBody.


        :param sku: The sku of this UserSubscriptionBody.
        :type sku: List[str]
        """

        self._sku = sku

    @property
    def child(self):
        """Gets the child of this UserSubscriptionBody.


        :return: The child of this UserSubscriptionBody.
        :rtype: str
        """
        return self._child

    @child.setter
    def child(self, child):
        """Sets the child of this UserSubscriptionBody.


        :param child: The child of this UserSubscriptionBody.
        :type child: str
        """

        self._child = child
