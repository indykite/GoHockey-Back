# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.invitation_information_body_message_attributes_inner import InvitationInformationBodyMessageAttributesInner
from openapi_server import util

from openapi_server.models.invitation_information_body_message_attributes_inner import InvitationInformationBodyMessageAttributesInner  # noqa: E501

class InvitationInformationBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_by=None, expire_time=None, invite_at_time=None, invitee=None, message_attributes=None, reference_id=None, state=None, tenant_id=None):  # noqa: E501
        """InvitationInformationBody - a model defined in OpenAPI

        :param accepted_by: The accepted_by of this InvitationInformationBody.  # noqa: E501
        :type accepted_by: str
        :param expire_time: The expire_time of this InvitationInformationBody.  # noqa: E501
        :type expire_time: datetime
        :param invite_at_time: The invite_at_time of this InvitationInformationBody.  # noqa: E501
        :type invite_at_time: datetime
        :param invitee: The invitee of this InvitationInformationBody.  # noqa: E501
        :type invitee: str
        :param message_attributes: The message_attributes of this InvitationInformationBody.  # noqa: E501
        :type message_attributes: List[InvitationInformationBodyMessageAttributesInner]
        :param reference_id: The reference_id of this InvitationInformationBody.  # noqa: E501
        :type reference_id: str
        :param state: The state of this InvitationInformationBody.  # noqa: E501
        :type state: str
        :param tenant_id: The tenant_id of this InvitationInformationBody.  # noqa: E501
        :type tenant_id: str
        """
        self.openapi_types = {
            'accepted_by': str,
            'expire_time': datetime,
            'invite_at_time': datetime,
            'invitee': str,
            'message_attributes': List[InvitationInformationBodyMessageAttributesInner],
            'reference_id': str,
            'state': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'accepted_by': 'accepted_by',
            'expire_time': 'expire_time',
            'invite_at_time': 'invite_at_time',
            'invitee': 'invitee',
            'message_attributes': 'message_attributes',
            'reference_id': 'reference_id',
            'state': 'state',
            'tenant_id': 'tenant_id'
        }

        self._accepted_by = accepted_by
        self._expire_time = expire_time
        self._invite_at_time = invite_at_time
        self._invitee = invitee
        self._message_attributes = message_attributes
        self._reference_id = reference_id
        self._state = state
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt) -> 'InvitationInformationBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The invitation_information_body of this InvitationInformationBody.  # noqa: E501
        :rtype: InvitationInformationBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_by(self):
        """Gets the accepted_by of this InvitationInformationBody.


        :return: The accepted_by of this InvitationInformationBody.
        :rtype: str
        """
        return self._accepted_by

    @accepted_by.setter
    def accepted_by(self, accepted_by):
        """Sets the accepted_by of this InvitationInformationBody.


        :param accepted_by: The accepted_by of this InvitationInformationBody.
        :type accepted_by: str
        """

        self._accepted_by = accepted_by

    @property
    def expire_time(self):
        """Gets the expire_time of this InvitationInformationBody.


        :return: The expire_time of this InvitationInformationBody.
        :rtype: datetime
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this InvitationInformationBody.


        :param expire_time: The expire_time of this InvitationInformationBody.
        :type expire_time: datetime
        """

        self._expire_time = expire_time

    @property
    def invite_at_time(self):
        """Gets the invite_at_time of this InvitationInformationBody.


        :return: The invite_at_time of this InvitationInformationBody.
        :rtype: datetime
        """
        return self._invite_at_time

    @invite_at_time.setter
    def invite_at_time(self, invite_at_time):
        """Sets the invite_at_time of this InvitationInformationBody.


        :param invite_at_time: The invite_at_time of this InvitationInformationBody.
        :type invite_at_time: datetime
        """

        self._invite_at_time = invite_at_time

    @property
    def invitee(self):
        """Gets the invitee of this InvitationInformationBody.


        :return: The invitee of this InvitationInformationBody.
        :rtype: str
        """
        return self._invitee

    @invitee.setter
    def invitee(self, invitee):
        """Sets the invitee of this InvitationInformationBody.


        :param invitee: The invitee of this InvitationInformationBody.
        :type invitee: str
        """

        self._invitee = invitee

    @property
    def message_attributes(self):
        """Gets the message_attributes of this InvitationInformationBody.


        :return: The message_attributes of this InvitationInformationBody.
        :rtype: List[InvitationInformationBodyMessageAttributesInner]
        """
        return self._message_attributes

    @message_attributes.setter
    def message_attributes(self, message_attributes):
        """Sets the message_attributes of this InvitationInformationBody.


        :param message_attributes: The message_attributes of this InvitationInformationBody.
        :type message_attributes: List[InvitationInformationBodyMessageAttributesInner]
        """

        self._message_attributes = message_attributes

    @property
    def reference_id(self):
        """Gets the reference_id of this InvitationInformationBody.


        :return: The reference_id of this InvitationInformationBody.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this InvitationInformationBody.


        :param reference_id: The reference_id of this InvitationInformationBody.
        :type reference_id: str
        """

        self._reference_id = reference_id

    @property
    def state(self):
        """Gets the state of this InvitationInformationBody.


        :return: The state of this InvitationInformationBody.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InvitationInformationBody.


        :param state: The state of this InvitationInformationBody.
        :type state: str
        """
        allowed_values = ["INVITATION_STATE_INVALID", "INVITATION_STATE_IN_FUTURE", "INVITATION_STATE_PENDING", "INVITATION_STATE_ACCEPTED", "INVITATION_STATE_EXPIRED", "INVITATION_STATE_CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tenant_id(self):
        """Gets the tenant_id of this InvitationInformationBody.


        :return: The tenant_id of this InvitationInformationBody.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this InvitationInformationBody.


        :param tenant_id: The tenant_id of this InvitationInformationBody.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
