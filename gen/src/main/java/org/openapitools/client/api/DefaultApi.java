/*
 * GoGretzky API
 * Go Gretzky is committed to offering you an outstanding range of world class hockey products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.UserAddressBody;
import org.openapitools.client.model.UserChildBody;
import org.openapitools.client.model.UserSubscriptionBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for rootGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Welcome to the GoGretzky API </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rootGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = rootGetCall(_callback);
        return localVarCall;

    }

    /**
     * Welcome to the GoGretzky API
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Welcome to the GoGretzky API </td><td>  -  </td></tr>
     </table>
     */
    public String rootGet() throws ApiException {
        ApiResponse<String> localVarResp = rootGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Welcome to the GoGretzky API
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Welcome to the GoGretzky API </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> rootGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = rootGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Welcome to the GoGretzky API (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Welcome to the GoGretzky API </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rootGetAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = rootGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAddressGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Home address of the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAddressGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAddressGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userAddressGetCall(_callback);
        return localVarCall;

    }

    /**
     * Get the home address of the logged in user
     * 
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Home address of the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 userAddressGet() throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = userAddressGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the home address of the logged in user
     * 
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Home address of the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> userAddressGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userAddressGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the home address of the logged in user (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Home address of the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAddressGetAsync(final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAddressGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userAddressPost
     * @param userAddressBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added home address to the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAddressPostCall(UserAddressBody userAddressBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userAddressBody;

        // create path and map variables
        String localVarPath = "/user/address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAddressPostValidateBeforeCall(UserAddressBody userAddressBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userAddressPostCall(userAddressBody, _callback);
        return localVarCall;

    }

    /**
     * Add a home address to the logged in user
     * 
     * @param userAddressBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added home address to the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public void userAddressPost(UserAddressBody userAddressBody) throws ApiException {
        userAddressPostWithHttpInfo(userAddressBody);
    }

    /**
     * Add a home address to the logged in user
     * 
     * @param userAddressBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added home address to the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userAddressPostWithHttpInfo(UserAddressBody userAddressBody) throws ApiException {
        okhttp3.Call localVarCall = userAddressPostValidateBeforeCall(userAddressBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a home address to the logged in user (asynchronously)
     * 
     * @param userAddressBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added home address to the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userAddressPostAsync(UserAddressBody userAddressBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAddressPostValidateBeforeCall(userAddressBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userChildChildIdGet
     * @param childId Id of the child to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userChildChildIdGetCall(String childId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/child/{childId}"
            .replaceAll("\\{" + "childId" + "\\}", localVarApiClient.escapeString(childId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userChildChildIdGetValidateBeforeCall(String childId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'childId' is set
        if (childId == null) {
            throw new ApiException("Missing the required parameter 'childId' when calling userChildChildIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = userChildChildIdGetCall(childId, _callback);
        return localVarCall;

    }

    /**
     * Get the child by id
     * 
     * @param childId Id of the child to get (required)
     * @return UserChildBody
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child information </td><td>  -  </td></tr>
     </table>
     */
    public UserChildBody userChildChildIdGet(String childId) throws ApiException {
        ApiResponse<UserChildBody> localVarResp = userChildChildIdGetWithHttpInfo(childId);
        return localVarResp.getData();
    }

    /**
     * Get the child by id
     * 
     * @param childId Id of the child to get (required)
     * @return ApiResponse&lt;UserChildBody&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child information </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserChildBody> userChildChildIdGetWithHttpInfo(String childId) throws ApiException {
        okhttp3.Call localVarCall = userChildChildIdGetValidateBeforeCall(childId, null);
        Type localVarReturnType = new TypeToken<UserChildBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the child by id (asynchronously)
     * 
     * @param childId Id of the child to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Child information </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userChildChildIdGetAsync(String childId, final ApiCallback<UserChildBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = userChildChildIdGetValidateBeforeCall(childId, _callback);
        Type localVarReturnType = new TypeToken<UserChildBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userChildPost
     * @param userChildBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added child to the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userChildPostCall(UserChildBody userChildBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userChildBody;

        // create path and map variables
        String localVarPath = "/user/child";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userChildPostValidateBeforeCall(UserChildBody userChildBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userChildPostCall(userChildBody, _callback);
        return localVarCall;

    }

    /**
     * Add a child to the logged in user
     * 
     * @param userChildBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added child to the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public void userChildPost(UserChildBody userChildBody) throws ApiException {
        userChildPostWithHttpInfo(userChildBody);
    }

    /**
     * Add a child to the logged in user
     * 
     * @param userChildBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added child to the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userChildPostWithHttpInfo(UserChildBody userChildBody) throws ApiException {
        okhttp3.Call localVarCall = userChildPostValidateBeforeCall(userChildBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a child to the logged in user (asynchronously)
     * 
     * @param userChildBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added child to the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userChildPostAsync(UserChildBody userChildBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userChildPostValidateBeforeCall(userChildBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userEmailGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email of the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userEmailGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userEmailGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userEmailGetCall(_callback);
        return localVarCall;

    }

    /**
     * Get the email of the logged in user
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email of the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public String userEmailGet() throws ApiException {
        ApiResponse<String> localVarResp = userEmailGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the email of the logged in user
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email of the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> userEmailGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userEmailGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the email of the logged in user (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email of the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userEmailGetAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = userEmailGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSubscriptionGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription of the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSubscriptionGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/subscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSubscriptionGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userSubscriptionGetCall(_callback);
        return localVarCall;

    }

    /**
     * Get the subscription of the logged in user
     * 
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription of the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 userSubscriptionGet() throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = userSubscriptionGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the subscription of the logged in user
     * 
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription of the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> userSubscriptionGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userSubscriptionGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the subscription of the logged in user (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription of the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSubscriptionGetAsync(final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSubscriptionGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSubscriptionPost
     * @param userSubscriptionBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added subscription to the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSubscriptionPostCall(UserSubscriptionBody userSubscriptionBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = userSubscriptionBody;

        // create path and map variables
        String localVarPath = "/user/subscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSubscriptionPostValidateBeforeCall(UserSubscriptionBody userSubscriptionBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userSubscriptionPostCall(userSubscriptionBody, _callback);
        return localVarCall;

    }

    /**
     * Add a subscription to the logged in user
     * 
     * @param userSubscriptionBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added subscription to the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public void userSubscriptionPost(UserSubscriptionBody userSubscriptionBody) throws ApiException {
        userSubscriptionPostWithHttpInfo(userSubscriptionBody);
    }

    /**
     * Add a subscription to the logged in user
     * 
     * @param userSubscriptionBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added subscription to the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userSubscriptionPostWithHttpInfo(UserSubscriptionBody userSubscriptionBody) throws ApiException {
        okhttp3.Call localVarCall = userSubscriptionPostValidateBeforeCall(userSubscriptionBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a subscription to the logged in user (asynchronously)
     * 
     * @param userSubscriptionBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added subscription to the logged in user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSubscriptionPostAsync(UserSubscriptionBody userSubscriptionBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSubscriptionPostValidateBeforeCall(userSubscriptionBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
